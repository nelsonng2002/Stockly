import streamlit as st
import pandas as pd
from functions import get_income_statement, get_income_statement_growth, get_financial_ratios, get_financial_ratios_ttm, revenue, plot_revenue, \
    gross_profit, plot_gross_profit, net_income, plot_net_income, plot_revenue_net_income_changes, \
    operating_income, plot_operating_income, cost_of_revenue, plot_cost_of_revenue, \
    plot_revenue_net_income_operating_income, get_gross_profit_margin, get_net_income_margin, \
    get_operating_profit_margin, plot_profit_margins, plot_gross_profit_margin, plot_net_income_margin, \
    plot_operating_profit_margin, get_roe, plot_roe, get_roa, plot_roa, get_roce, plot_roce, \
    plot_stacked_area_margins, cash_flow, free_cash_flow, plot_free_cash_flow, \
    plot_fcf_net_income, plot_revenue_comparison, plot_gross_profit_comparison, plot_net_income_comparison, plot_operating_income_comparison, \
    plot_cost_of_revenue_comparison, plot_gross_profit_margin_comparison, plot_net_income_margin_comparison, plot_operating_profit_margin_comparison, \
    get_earnings_history, plot_earnings, plot_past_year_earnings, get_product_revenue_segment, plot_revenue_segments, get_revenue_geo_segment, plot_revenue_geo_segments

st.title('Profitability Metrics')
st.markdown('''Analyse the profitability of a company by looking at its revenue, net income, profit margins, free cash flow and historical earnings.  
            - **Compare with Competitors**: Compare the profitability trends of a different companies over time.  
            - **Revenue Segments**: Analyse the revenue generated by different products or services.  
            - **Geographic Revenue Segments**: Analyse the revenue generated by different geographic regions.  
            ''')
symbol = st.session_state.get('symbol', 'AAPL')
symbol_input = st.text_input('Enter stock symbol', value=symbol)
if symbol_input:
    st.session_state['symbol'] = symbol_input
    symbol = symbol_input

selected_period = st.selectbox('Select annual or quarter financial data', options=['Annual', 'Quarter'])
period = selected_period.lower()

income_statement = get_income_statement(symbol, period)
income_statement_growth = get_income_statement_growth(symbol, period)
financial_ratios = get_financial_ratios(symbol, period)
financial_ratios_ttm = get_financial_ratios_ttm(symbol)
cash_flow = cash_flow(symbol, period)

metrics_container = st.container()
revenue_list = revenue(income_statement)
net_income_list = net_income(income_statement)
net_income_margin_list = get_net_income_margin(financial_ratios, financial_ratios_ttm)
latest_net_income_margin = net_income_margin_list[0]['net_income_margin'] * 100
latest_revenue = int(revenue_list[0]['revenue'] / 1000000000)
latest_net_income = int(net_income_list[0]['net_income'] / 1000000000)
revenue_metric_col, net_income_metric_col, net_income_margin_metric_col = metrics_container.columns(3)
revenue_metric_col.metric('Revenue', f"~${latest_revenue:,}B")
net_income_metric_col.metric('Net Income', f"~${latest_net_income:,}B")
net_income_margin_metric_col.metric('Net Income Margin', f"{latest_net_income_margin:.2f}%")

revenue_net_income_operating_income_container = st.container()
gross_profit_list = gross_profit(income_statement)
operating_income_list = operating_income(income_statement)
cost_of_revenue_list = cost_of_revenue(income_statement)
revenue_net_income_operating_income_plot = plot_revenue_net_income_operating_income(symbol, income_statement, income_statement_growth)
revenue_net_income_operating_income_container.plotly_chart(revenue_net_income_operating_income_plot)

revenue_segments_container = st.container()
revenue_segments = get_product_revenue_segment(symbol, period)
revenue_segments_plot = plot_revenue_segments(symbol, revenue_segments)
revenue_segments_container.plotly_chart(revenue_segments_plot)

revenue_geo_segments_container = st.container()
revenue_geo_segments = get_revenue_geo_segment(symbol, period)
revenue_geo_segments_plot = plot_revenue_geo_segments(symbol, revenue_geo_segments)
revenue_geo_segments_container.plotly_chart(revenue_geo_segments_plot)

revenue_net_income_changes_container = st.container()
revenue_net_income_changes_plot = plot_revenue_net_income_changes(symbol, revenue_list, net_income_list)
revenue_net_income_changes_container.plotly_chart(revenue_net_income_changes_plot)

profit_margins_container = st.container()
gross_profit_margin_list = get_gross_profit_margin(financial_ratios, financial_ratios_ttm)
operating_profit_margin_list = get_operating_profit_margin(financial_ratios, financial_ratios_ttm)
profit_margins_plot = plot_profit_margins(symbol, gross_profit_margin_list, net_income_margin_list, operating_profit_margin_list)
profit_margins_container.plotly_chart(profit_margins_plot)

profit_margins_stacked_container = st.container()
profit_margins_stacked_plot = plot_stacked_area_margins(symbol, gross_profit_margin_list, operating_profit_margin_list, net_income_margin_list)
profit_margins_stacked_container.plotly_chart(profit_margins_stacked_plot)

free_cash_flow_container = st.container()
free_cash_flow_list = free_cash_flow(cash_flow)
free_cash_flow_plot = plot_free_cash_flow(symbol, free_cash_flow_list)
free_cash_flow_container.plotly_chart(free_cash_flow_plot)
fcf_net_income_plot = plot_fcf_net_income(symbol, free_cash_flow_list, net_income_list)
free_cash_flow_container.plotly_chart(fcf_net_income_plot)

profitability_plots_container = st.container()
revenue_tab, gross_profit_tab, net_income_tab, operating_income_tab, cost_of_revenue_tab = profitability_plots_container.tabs(['Revenue', 'Gross Profit', 'Net Income', 'Operating Income', 'Cost of Revenue'])
with revenue_tab:
    revenue_plot = plot_revenue(symbol, revenue_list)
    st.plotly_chart(revenue_plot)
    revenue_expander = st.expander('Revenue Details', expanded=False)
    revenue_df = pd.DataFrame({
        'Date': [item['date'] for item in revenue_list],
        'Revenue': [item['revenue'] for item in revenue_list]
    })
    revenue_expander.markdown(revenue_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    revenue_comparison_expander = st.expander('Compare Revenues with Competitors', expanded=True)
    revenue_comparison_symbols = revenue_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='revenue_comparison')
    symbol_list = []
    revenue_comparison_list = []
    for symbol_item in revenue_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_revenue_list = revenue(get_income_statement(symbol_item, period))
        revenue_comparison_list.append(symbol_revenue_list)
    revenue_comparison_plot = plot_revenue_comparison(symbol_list, revenue_comparison_list)
    revenue_comparison_expander.plotly_chart(revenue_comparison_plot)
with gross_profit_tab:
    gross_profit_plot = plot_gross_profit(symbol, gross_profit_list)
    st.plotly_chart(gross_profit_plot)
    gross_profit_expander = st.expander('Gross Profit Details', expanded=False)
    gross_profit_df = pd.DataFrame({
        'Date': [item['date'] for item in gross_profit_list],
        'Gross Profit': [item['gross_profit'] for item in gross_profit_list]
    })
    gross_profit_expander.markdown(gross_profit_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    gross_profit_comparison_expander = st.expander('Compare Gross Profits with Competitors', expanded=True)
    gross_profit_comparison_symbols = gross_profit_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='gross_profit_comparison')
    symbol_list = []
    gross_profit_comparison_list = []
    for symbol_item in gross_profit_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_gross_profit_list = gross_profit(get_income_statement(symbol_item, period))
        gross_profit_comparison_list.append(symbol_gross_profit_list)
    gross_profit_comparison_plot = plot_gross_profit_comparison(symbol_list, gross_profit_comparison_list)
    gross_profit_comparison_expander.plotly_chart(gross_profit_comparison_plot)
with net_income_tab:
    net_income_plot = plot_net_income(symbol, net_income_list)
    st.plotly_chart(net_income_plot)
    net_income_expander = st.expander('Net Income Details', expanded=False)
    net_income_df = pd.DataFrame({
        'Date': [item['date'] for item in net_income_list],
        'Net Income': [item['net_income'] for item in net_income_list]
    })
    net_income_expander.markdown(net_income_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    net_income_comparison_expander = st.expander('Compare Net Incomes with Competitors', expanded=True)
    net_income_comparison_symbols = net_income_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='net_income_comparison')
    symbol_list = []
    net_income_comparison_list = []
    for symbol_item in net_income_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_net_income_list = net_income(get_income_statement(symbol_item, period))
        net_income_comparison_list.append(symbol_net_income_list)
    net_income_comparison_plot = plot_net_income_comparison(symbol_list, net_income_comparison_list)
    net_income_comparison_expander.plotly_chart(net_income_comparison_plot)
with operating_income_tab:
    operating_income_plot = plot_operating_income(symbol, operating_income_list)
    st.plotly_chart(operating_income_plot)
    operating_income_expander = st.expander('Operating Income Details', expanded=False)
    operating_income_df = pd.DataFrame({
        'Date': [item['date'] for item in operating_income_list],
        'Operating Income': [item['operating_income'] for item in operating_income_list]
    })
    operating_income_expander.markdown(operating_income_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    operating_income_comparison_expander = st.expander('Compare Operating Incomes with Competitors', expanded=True)
    operating_income_comparison_symbols = operating_income_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='operating_income_comparison')
    symbol_list = []
    operating_income_comparison_list = []
    for symbol_item in operating_income_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_operating_income_list = operating_income(get_income_statement(symbol_item, period))
        operating_income_comparison_list.append(symbol_operating_income_list)
    operating_income_comparison_plot = plot_operating_income_comparison(symbol_list, operating_income_comparison_list)
    operating_income_comparison_expander.plotly_chart(operating_income_comparison_plot)
with cost_of_revenue_tab:
    cost_of_revenue_plot = plot_cost_of_revenue(symbol, cost_of_revenue_list)
    st.plotly_chart(cost_of_revenue_plot)
    cost_of_revenue_expander = st.expander('Cost of Revenue Details', expanded=False)
    cost_of_revenue_df = pd.DataFrame({
        'Date': [item['date'] for item in cost_of_revenue_list],
        'Cost of Revenue': [item['cost_of_revenue'] for item in cost_of_revenue_list]
    })
    cost_of_revenue_expander.markdown(cost_of_revenue_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    cost_of_revenue_comparison_expander = st.expander('Compare Cost of Revenues with Competitors', expanded=True)
    cost_of_revenue_comparison_symbols = cost_of_revenue_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='cost_of_revenue_comparison')
    symbol_list = []
    cost_of_revenue_comparison_list = []
    for symbol_item in cost_of_revenue_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_cost_of_revenue_list = cost_of_revenue(get_income_statement(symbol_item, period))
        cost_of_revenue_comparison_list.append(symbol_cost_of_revenue_list)
    cost_of_revenue_comparison_plot = plot_cost_of_revenue_comparison(symbol_list, cost_of_revenue_comparison_list)
    cost_of_revenue_comparison_expander.plotly_chart(cost_of_revenue_comparison_plot)

margin_plots_container = st.container()
gross_profit_margin_tab, net_income_margin_tab, operating_profit_margin_tab = margin_plots_container.tabs(['Gross Profit Margin', 'Net Income Margin', 'Operating Profit Margin'])
with gross_profit_margin_tab:
    gross_profit_margin_plot = plot_gross_profit_margin(symbol, gross_profit_margin_list)
    st.plotly_chart(gross_profit_margin_plot)
    gross_marging_expander = st.expander('Gross Profit Margin Details', expanded=False)
    gross_margin_df = pd.DataFrame({
        'Date': [item['date'] for item in gross_profit_margin_list],
        'Gross Profit Margin': [item['gross_profit_margin'] for item in gross_profit_margin_list]
    })
    gross_marging_expander.markdown(gross_margin_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    gross_profit_margin_comparison_expander = st.expander('Compare Gross Profit Margins with Competitors', expanded=True)
    gross_profit_margin_comparison_symbols = gross_profit_margin_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='gross_profit_margin_comparison')
    symbol_list = []
    gross_profit_margin_comparison_list = []
    for symbol_item in gross_profit_margin_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_gross_profit_margin_list = get_gross_profit_margin(get_financial_ratios(symbol_item, period), get_financial_ratios_ttm(symbol_item))
        gross_profit_margin_comparison_list.append(symbol_gross_profit_margin_list)
    gross_profit_margin_comparison_plot = plot_gross_profit_margin_comparison(symbol_list, gross_profit_margin_comparison_list)
    gross_profit_margin_comparison_expander.plotly_chart(gross_profit_margin_comparison_plot)
with net_income_margin_tab:
    net_income_margin_plot = plot_net_income_margin(symbol, net_income_margin_list)
    st.plotly_chart(net_income_margin_plot)
    net_income_margin_expander = st.expander('Net Income Margin Details', expanded=False)
    net_income_margin_df = pd.DataFrame({
        'Date': [item['date'] for item in net_income_margin_list],
        'Net Income Margin': [item['net_income_margin'] for item in net_income_margin_list]
    })
    net_income_margin_expander.markdown(net_income_margin_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    net_income_margin_comparison_expander = st.expander('Compare Net Income Margins with Competitors', expanded=True)
    net_income_margin_comparison_symbols = net_income_margin_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='net_income_margin_comparison')
    symbol_list = []
    net_income_margin_comparison_list = []
    for symbol_item in net_income_margin_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_net_income_margin_list = get_net_income_margin(get_financial_ratios(symbol_item, period), get_financial_ratios_ttm(symbol_item))
        net_income_margin_comparison_list.append(symbol_net_income_margin_list)
    net_income_margin_comparison_plot = plot_net_income_margin_comparison(symbol_list, net_income_margin_comparison_list)
    net_income_margin_comparison_expander.plotly_chart(net_income_margin_comparison_plot)
with operating_profit_margin_tab:
    operating_profit_margin_plot = plot_operating_profit_margin(symbol, operating_profit_margin_list)
    st.plotly_chart(operating_profit_margin_plot)
    operating_profit_margin_expander = st.expander('Operating Profit Margin Details', expanded=False)
    operating_profit_margin_df = pd.DataFrame({
        'Date': [item['date'] for item in operating_profit_margin_list],
        'Operating Profit Margin': [item['operating_profit_margin'] for item in operating_profit_margin_list]
    })
    operating_profit_margin_expander.markdown(operating_profit_margin_df.style.hide(axis="index").to_html(), unsafe_allow_html=True)
    operating_profit_margin_comparison_expander = st.expander('Compare Operating Profit Margins with Competitors', expanded=True)
    operating_profit_margin_comparison_symbols = operating_profit_margin_comparison_expander.text_input('Enter a list of up to 4 stock symbols separated by commas and hit ENTER', value=f'{symbol},MSFT,GOOGL,AMZN', key='operating_profit_margin_comparison')
    symbol_list = []
    operating_profit_margin_comparison_list = []
    for symbol_item in operating_profit_margin_comparison_symbols.split(','):
        symbol_list.append(symbol_item)
        symbol_operating_profit_margin_list = get_operating_profit_margin(get_financial_ratios(symbol_item, period), get_financial_ratios_ttm(symbol_item))
        operating_profit_margin_comparison_list.append(symbol_operating_profit_margin_list)
    operating_profit_margin_comparison_plot = plot_operating_profit_margin_comparison(symbol_list, operating_profit_margin_comparison_list)
    operating_profit_margin_comparison_expander.plotly_chart(operating_profit_margin_comparison_plot)

returns_container = st.container()
roe_list = get_roe(financial_ratios, financial_ratios_ttm)
roa_list = get_roa(financial_ratios, financial_ratios_ttm)
roce_list = get_roce(financial_ratios, financial_ratios_ttm)
roe, roa, roce = returns_container.tabs(['Return on Equity (ROE)', 'Return on Assets (ROA)', 'Return on Capital Employed (ROCE)'])
with roe:
    roe_plot = plot_roe(symbol, roe_list)
    st.plotly_chart(roe_plot)
with roa:
    roa_plot = plot_roa(symbol, roa_list)
    st.plotly_chart(roa_plot)
with roce:
    roce_plot = plot_roce(symbol, roce_list)
    st.plotly_chart(roce_plot)

earnings_container = st.container()
earnings_container.markdown('### Earnings History')
earnings_history_list = get_earnings_history(symbol)
past_year_earnings_plot = plot_past_year_earnings(symbol, earnings_history_list)
earnings_container.plotly_chart(past_year_earnings_plot)
earnings_plot = plot_earnings(symbol, earnings_history_list)
earnings_container.plotly_chart(earnings_plot)
